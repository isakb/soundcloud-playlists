_, Backbone, EventHub, addTrackTemplate <- define <[ underscore backbone ../events text!../templates/add_track.html ]>

# View / Controller for the "add track to playlist" form.
Backbone.View.extend do
  el: \#playlist-add-track
  template: _.template addTrackTemplate

  events:
    "click .submit":          \onAddTrack

  initialize: ->
    _.bindAll @
    # Allow to add tracks with the bookmarklet:
    try
      parts = location.search.slice(1).split("&")
      trackUrls = _.map parts, (part) ->
        url = part.match(/^track[^=]*=([^&]+)/)[1]
        decodeURIComponent url
      if trackUrls
        # add all of the tracks asynchronously
        for url of _.map trackUrls, decodeURIComponent
          _.defer _.bind @addTrackFromUrl, @, url

  changeModel: (@model) ->

  render: ->
    tplVars = @model.toJSON!
    tplVars.appUrl = location.protocol + "//" + location.hostname + ((if location.port is "80" then "" else (":" + location.port))) + location.pathname
    tplVars.bookmarkletUrl = tplVars.appUrl.replace("index.html", "bookmarklet.js")
    @$el.html @template(tplVars)
    @


  # when user fills in a track URL and submits the form
  onAddTrack: (e) ->
    e.preventDefault!
    $trackUrl = @$ "form input[name=new_track]"
    url = $trackUrl.val!
    if /https?:\/\/.+/.test(url)
      @addTrackFromUrl url
      @render!
    else
      $trackUrl.val "Please enter the URL of the track here!" .select!

  # Add a track from a typical Soundcloud track URL, e.g.:
  # http://soundcloud.com/isakba/mahadatest6 or /isakba/mahdadatest6
  addTrackFromUrl: (trackUrl) ->
    trackUrl = "http://soundcloud.com#{trackUrl}"  if trackUrl[0] is "/"
    @model
    ..addTrackFromUrl trackUrl
    ..done (track) -> EventHub.trigger "add-track-form:track-added", track
    ..fail (error) -> window.alert "Sorry! Not a valid track URL: " + trackUrl
